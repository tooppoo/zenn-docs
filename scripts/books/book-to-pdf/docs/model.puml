@startuml model to build pdf from markdown
package core {
  package book {
    class Book {
      id: string
      path: string
    }
    class Section {
      title: string
      index: number
    }

    Book o-r-> "n" Section

    interface BookShelf {
      find(id: string): Book
    }
    BookShelf ..> Book : build
  }

  package serializer {
    class SerializedBook {
      id: string
      contents: string
    }

    interface Serializer {
      with(decorat:r SerializerDecorator): Serializer
      serialize(book: Book): Promise<SerializedBook>
    }
    Serializer .u.> Book : serialize
    Serializer .r.> SerializedBook : build

    package kind {
      CatSerializer .l.|> Serializer
    }

    package decorator {
      interface SerializerDecorator << Function >> {
        (serialized: SerializedBook): SerializedBook
      }

      ReplaceMetaTitleToHeader .u.|> SerializerDecorator
      WithoutMetaData .u.|> SerializerDecorator

      SerializerDecorator .u.> SerializedBook : decorate
    }
    Serializer ..> SerializerDecorator
  }

  package conversion {
    interface Converter {
      convert(book: SerializedBook, outPath: string)
    }
    Converter ..> SerializedBook : convert

    class ConvertBook << service >>
    ConvertBook ..> Converter : convert serialized book
    ConvertBook .r.> BookShelf : use to get book
    ConvertBook ..> Serializer : use to serialize book

    package converter {
      class PDFConverter
      PDFConverter .u.|> Converter
    }
  }
}

package app {
  package zenn {
    class ZennBookShelf
    ZennBookShelf .u.|> BookShelf

    class ZennBookConfig {
      chapters: string[]
    }
    ZennBookShelf ..> ZennBookConfig : use
  }
}

package cli {
  class CliArgument {
    src: string
    out: string
  }

  class CliConversionProcess
  CliConversionProcess -r-> CliArgument : use to build objects
}

cli ..> core
@enduml
